name: CI

on:
  workflow_dispatch:
  schedule: # 每月1日自动触发
    - cron: '0 0 1 * *'
  push:
    branches:
      - readme
    paths:
      - .github/workflows/ci.yml

env:
  SCRIPT_REPO: ${{ github.repository }}
  SCRIPT_REF: ${{ github.ref_name }}
  UBOOT_REPO: hzyitc/u-boot-onecloud
  UBOOT_RELEASE: latest
  UBOOT_BURNIMG: eMMC.burn.img
  ARMBIAN_REPO: armbian/build
  ARMBIAN_REF: main
  PATCHES: 4077,5076
  PATCHES_DISABLED: 5082

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-22.04
    outputs:
      env: ${{ steps.get.outputs.env }}
    steps:
      - id: get
        name: Get repositories information
        run: |
          TIME="$(curl https://api.github.com/repos/${SCRIPT_REPO}/actions/runs/${GITHUB_RUN_ID} | jq -r .created_at)"
          TAG="ci-$(date -d "${TIME}" -u +'%Y%m%d-%H%M%S-%Z')"

          SCRIPT_SHA=$(curl https://api.github.com/repos/${SCRIPT_REPO}/commits/${SCRIPT_REF} | jq -r .sha)
          UBOOT_TAG=$(curl https://api.github.com/repos/${UBOOT_REPO}/releases/${UBOOT_RELEASE} | jq -r .tag_name)
          ARMBIAN_SHA=$(curl https://api.github.com/repos/${ARMBIAN_REPO}/commits/${ARMBIAN_REF} | jq -r .sha)

          cat <<EOF | sed -E 's/^  //' >>$GITHUB_ENV
            TIME=$TIME
            TAG=$TAG
            SCRIPT_SHA=$SCRIPT_SHA
            UBOOT_TAG=$UBOOT_TAG
            ARMBIAN_SHA=$ARMBIAN_SHA
          EOF
          echo "env=$(cat $GITHUB_ENV | base64 -w 0)" >>$GITHUB_OUTPUT

  build-debs:
    name: Build ${{ matrix.BRANCH }}
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BRANCH:
          - edge
          - current

    steps:
      - name: Import env
        run: |
          echo "$(echo "${{ needs.prepare.outputs.env }}" | base64 -d)" >>$GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ARMBIAN_REPO }}
          ref: ${{ env.ARMBIAN_SHA }}

      - name: "Apply patch ${{ env.PATCHES }}"
        if: ${{ env.PATCHES }}
        run: |
          echo "::group::Download"
          curl -L -O "https://github.com/armbian/build/pull/{${PATCHES}}.patch"
          echo "::endgroup::"

          for file in *.patch; do
            echo "::group::Applying $file"
            patch --batch -p1 -N <"$file"
            echo "::endgroup::"

      - name: Build
        run: |
          # 不更新远程缓存
          export GITHUB_ACTIONS=false
          sudo --preserve-env \
            ./compile.sh kernel \
              ALLOW_ROOT=yes \
              BOARD=onecloud \
              BRANCH=${{ matrix.BRANCH }} \
              EXPERT=yes \
              USE_CCACHE=no
          sudo chown $(id -u):$(id -g) -R output/

      # 仅对不包含 'burn' 的步骤进行仓库内容的下载和复制
      - name: Download onecloud-emmc-install repository
        if: "! contains( matrix.TYPE, 'burn' )"
        run: |
          echo "::group::Download onecloud-emmc-install"
          git clone https://github.com/raysworld/onecloud-emmc-install /tmp/onecloud-emmc-install
          echo "::endgroup::"

      - name: Copy onecloud-emmc-install content to boot folder
        if: "! contains( matrix.TYPE, 'burn' )"
        run: |
          echo "::group::Copy files"
          cp -r /tmp/onecloud-emmc-install/* output/debs/boot/
          echo "::endgroup::"

      - name: Package kernel into tar.gz
        run: |
          cd output/debs
          tar -czvf armbian-kernel-${{ matrix.BRANCH }}.tar.gz *.deb

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: debs-${{ matrix.BRANCH }}
          path: output/debs/*

      - name: Upload tar.gz to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          files: |
            output/debs/armbian-kernel-${{ matrix.BRANCH }}.tar.gz

  build:
    name: Build ${{ matrix.RELEASE }}-${{ matrix.BRANCH }}-${{ matrix.TYPE == 'desktop' && matrix.DESKTOP_ENVIRONMENT || matrix.TYPE }}
    needs: [ prepare, build-debs ]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BRANCH:
          - edge
          - current
        RELEASE:
          # - focal # Ubuntu 20.04 LTS
          # - jammy # Ubuntu 22.04 LTS
          - noble # Ubuntu 24.04 LTS
          # - buster # Debian 10
          # - bullseye # Debian 11
          - bookworm # Debian 12
        TYPE:
          - minimal
          # - cli
          # - desktop
#        include:
#          - TYPE: desktop
#            DESKTOP_ENVIRONMENT: xfce
#            DESKTOP_ENVIRONMENT_CONFIG_NAME: config_base
#            DESKTOP_APPGROUPS_SELECTED: ""
#        exclude:
#          - RELEASE: sid
#            TYPE: desktop

    steps:
      - name: Import env
        run: |
          echo "$(echo "${{ needs.prepare.outputs.env }}" | base64 -d)" >>$GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ARMBIAN_REPO }}
          ref: ${{ env.ARMBIAN_SHA }}

      - name: "Apply patch ${{ env.PATCHES }}"
        if: ${{ env.PATCHES }}
        run: |
          echo "::group::Download"
          curl -L -O "https://github.com/armbian/build/pull/{${PATCHES}}.patch"
          echo "::endgroup::"

          for file in *.patch; do
            echo "::group::Applying $file"
            patch --batch -p1 -N <"$file"
            echo "::endgroup::"

      - name: Download debs
        uses: actions/download-artifact@v3
        with:
          name: debs-${{ matrix.BRANCH }}
          path: output/debs/

      - name: Build
        run: |
          # 不更新远程缓存
          export GITHUB_ACTIONS=false
          sudo --preserve-env \
            ./compile.sh build \
              ALLOW_ROOT=yes \
              BOARD=onecloud \
              BRANCH=${{ matrix.BRANCH }} \
              RELEASE=${{ matrix.RELEASE }} \
              KERNEL_CONFIGURE=no \
              BUILD_MINIMAL=${{ matrix.TYPE == 'minimal' && 'yes' || 'no' }} \
              BUILD_DESKTOP=${{ matrix.TYPE == 'desktop' && 'yes' || 'no' }} \
              DESKTOP_ENVIRONMENT=${{ matrix.DESKTOP_ENVIRONMENT }} \
              DESKTOP_ENVIRONMENT_CONFIG_NAME=${{ matrix.DESKTOP_ENVIRONMENT_CONFIG_NAME }} \
              DESKTOP_APPGROUPS_SELECTED=${{ matrix.DESKTOP_APPGROUPS_SELECTED }} \
              EXPERT=yes \
              SKIP_EXTERNAL_TOOLCHAINS=yes \
              CLEAN_LEVEL= \
              USE_CCACHE=no \
              COMPRESS_OUTPUTIMAGE=img
          sudo chown $(id -u):$(id -g) -R output/

      - name: Install Dependents
        run: |
          sudo apt install img2simg

          ver="v0.3.1"
          curl -L -o ./AmlImg https://github.com/hzyitc/AmlImg/releases/download/$ver/AmlImg_${ver}_linux_amd64
          chmod +x ./AmlImg

      - name: Download and unpack the latest u-boot
        run: |
          echo "::group::Download"
          curl -L -o ./uboot.img https://github.com/${UBOOT_REPO}/releases/download/${UBOOT_TAG}/${UBOOT_BURNIMG}
          echo "::endgroup::"

          echo "::group::Unpack"
          ./AmlImg unpack ./uboot.img burn/
          echo "::endgroup::"

      - name: Extract boot and rootfs partitions
        run: |
          diskimg=$(ls output/images/*.img)
          loop=$(sudo losetup --find --show --partscan $diskimg)
          sudo img2simg ${loop}p1 burn/boot.simg
          sudo img2simg ${loop}p2 burn/rootfs.simg
          sudo losetup -d $loop
          sudo chown $(id -u):$(id -g) -R burn/

      - name: Generate burn image
        run: |
          echo -n "sha1sum $(sha1sum burn/boot.simg | awk '{print $1}')" >burn/boot.VERIFY
          echo -n "sha1sum $(sha1sum burn/rootfs.simg | awk '{print $1}')" >burn/rootfs.VERIFY

          cat <<EOF >>burn/commands.txt
          PARTITION:boot:sparse:boot.simg
          VERIFY:boot:normal:boot.VERIFY
          PARTITION:rootfs:sparse:rootfs.simg
          VERIFY:rootfs:normal:rootfs.VERIFY
          EOF

          prefix=$(ls output/images/*.img | sed 's/\.img$//')
          burnimg=${prefix}.burn.img
          ./AmlImg pack $burnimg burn/

      - name: Hash and compress images
        run: |
          for f in output/images/*.img; do
            sha256sum "$f" | tee -a sha256sum
            xz --threads=0 --compress "$f"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.RELEASE }}-${{ matrix.BRANCH }}-${{ matrix.TYPE == 'desktop' && matrix.DESKTOP_ENVIRONMENT || matrix.TYPE }}
          path: output/images/*

      - name: Generate release informations
        run: |
          cat <<EOF | sed -E 's/^  //' | tee Release.md
            $(cat sha256sum | awk '{printf "%s: `%s`\n", $2, $1}')
          EOF

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          append_body: true
          body_path: Release.md
          files: |
            output/images/*
