name: CI

on:
  workflow_dispatch:
  schedule: # 每月1日自动触发
    - cron: '0 0 1 * *'
  push:
    branches:
      - readme
    paths:
      - .github/workflows/ci.yml

env:
  SCRIPT_REPO: ${{ github.repository }}
  SCRIPT_REF: ${{ github.ref_name }}
  UBOOT_REPO: hzyitc/u-boot-onecloud
  UBOOT_RELEASE: latest
  UBOOT_BURNIMG: eMMC.burn.img
  ARMBIAN_REPO: armbian/build
  ARMBIAN_REF: main
  PATCHES: 4077,5076
  PATCHES_DISABLED: 5082

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-22.04
    outputs:
      env: ${{ steps.get.outputs.env }}
    steps:
      - id: get
        name: Get repositories information
        run: |
          TIME="$(curl https://api.github.com/repos/${SCRIPT_REPO}/actions/runs/${GITHUB_RUN_ID} | jq -r .created_at)"
          TAG="ci-$(date -d "${TIME}" -u +'%Y%m%d-%H%M%S-%Z')"

          SCRIPT_SHA=$(curl https://api.github.com/repos/${SCRIPT_REPO}/commits/${SCRIPT_REF} | jq -r .sha)
          UBOOT_TAG=$(curl https://api.github.com/repos/${UBOOT_REPO}/releases/${UBOOT_RELEASE} | jq -r .tag_name)
          ARMBIAN_SHA=$(curl https://api.github.com/repos/${ARMBIAN_REPO}/commits/${ARMBIAN_REF} | jq -r .sha)

          cat <<EOF | sed -E 's/^  //' >>$GITHUB_ENV
            TIME=$TIME
            TAG=$TAG
            SCRIPT_SHA=$SCRIPT_SHA
            UBOOT_TAG=$UBOOT_TAG
            ARMBIAN_SHA=$ARMBIAN_SHA
          EOF
          echo "env=$(cat $GITHUB_ENV | base64 -w 0)" >>$GITHUB_OUTPUT

build-debs:
    name: Build ${{ matrix.BRANCH }}
    needs: prepare
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        BRANCH:
          - edge
          - current

    steps:
      - name: Import env
        run: |
          echo "$(echo "${{ needs.prepare.outputs.env }}" | base64 -d)" >>$GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ARMBIAN_REPO }}
          ref: ${{ env.ARMBIAN_SHA }}

      - name: "Apply patch ${{ env.PATCHES }}"
        if: ${{ env.PATCHES }}
        run: |
          echo "::group::Download"
          curl -L -O "https://github.com/armbian/build/pull/{${PATCHES}}.patch"
          echo "::endgroup::"

          for file in *.patch; do
            echo "::group::Applying $file"
            patch --batch -p1 -N <"$file"
            echo "::endgroup::"
          done

      - name: Build
        run: |
          export GITHUB_ACTIONS=false
          sudo --preserve-env \
            ./compile.sh kernel \
              ALLOW_ROOT=yes \
              BOARD=onecloud \
              BRANCH=${{ matrix.BRANCH }} \
              EXPERT=yes \
              USE_CCACHE=no
          sudo chown $(id -u):$(id -g) -R output/

      # 打包 kernel.tar.gz
      - name: Package kernel into tar.gz
        run: |
          cd output/debs
          tar -czvf armbian-kernel-${{ matrix.BRANCH }}.tar.gz *.deb

      - name: Upload deb packages
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "kernel-${{ env.TIME }}"
          files: |
            output/debs/armbian-kernel-${{ matrix.BRANCH }}.tar.gz

  build:
    name: Build ${{ matrix.RELEASE }}-${{ matrix.BRANCH }}-${{ matrix.TYPE == 'desktop' && matrix.DESKTOP_ENVIRONMENT || matrix.TYPE }}
    needs: [ prepare, build-debs ]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BRANCH:
          - edge
          - current
        RELEASE:
          - noble # Ubuntu 24.04 LTS
          - bookworm # Debian 12

    steps:
      - name: Import env
        run: |
          echo "$(echo "${{ needs.prepare.outputs.env }}" | base64 -d)" >>$GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ARMBIAN_REPO }}
          ref: ${{ env.ARMBIAN_SHA }}

      - name: Build
        run: |
          export GITHUB_ACTIONS=false
          sudo --preserve-env \
            ./compile.sh build \
              ALLOW_ROOT=yes \
              BOARD=onecloud \
              BRANCH=${{ matrix.BRANCH }} \
              RELEASE=${{ matrix.RELEASE }} \
              KERNEL_CONFIGURE=no \
              BUILD_MINIMAL=${{ matrix.TYPE == 'minimal' && 'yes' || 'no' }} \
              BUILD_DESKTOP=${{ matrix.TYPE == 'desktop' && 'yes' || 'no' }} \
              DESKTOP_ENVIRONMENT=${{ matrix.DESKTOP_ENVIRONMENT }} \
              EXPERT=yes \
              USE_CCACHE=no \
              COMPRESS_OUTPUTIMAGE=img
          sudo chown $(id -u):$(id -g) -R output/

      - name: Upload Debian artifacts
        if: matrix.RELEASE == 'bookworm'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "Debian-${{ env.TIME }}"
          files: |
            output/images/*.img

      - name: Upload Ubuntu artifacts
        if: matrix.RELEASE == 'noble'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "Ubuntu-${{ env.TIME }}"
          files: |
            output/images/*.img

