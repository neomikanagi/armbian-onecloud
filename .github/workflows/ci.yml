on:
  workflow_dispatch:
  push:
    branches:
      - readme
    paths:
      - .github/workflows/ci.yml

env:
  SCRIPT_REPO: ${{ github.repository }}
  SCRIPT_REF: ${{ github.ref_name }}
  UBOOT_REPO: hzyitc/u-boot-onecloud
  UBOOT_RELEASE: latest
  UBOOT_BURNIMG: eMMC.burn.img
  ARMBIAN_REPO: armbian/build
  ARMBIAN_REF: main
  PATCHES: 4077,5076
  PATCHES_DISABLED: 5082

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-22.04
    outputs:
      env: ${{ steps.get.outputs.env }}
    steps:
      - id: get
        name: Get repositories information
        run: |
          TIME="$(curl https://api.github.com/repos/${SCRIPT_REPO}/actions/runs/${GITHUB_RUN_ID} | jq -r .created_at)"
          TAG="ci-$(date -d "${TIME}" -u +'%Y%m%d-%H%M%S-%Z')"

          SCRIPT_SHA=$(curl https://api.github.com/repos/${SCRIPT_REPO}/commits/${SCRIPT_REF} | jq -r .sha)
          UBOOT_TAG=$(curl https://api.github.com/repos/${UBOOT_REPO}/releases/${UBOOT_RELEASE} | jq -r .tag_name)
          ARMBIAN_SHA=$(curl https://api.github.com/repos/${ARMBIAN_REPO}/commits/${ARMBIAN_REF} | jq -r .sha)

          cat <<EOF | sed -E 's/^  //' >>$GITHUB_ENV
            TIME=$TIME
            TAG=$TAG
            SCRIPT_SHA=$SCRIPT_SHA
            UBOOT_TAG=$UBOOT_TAG
            ARMBIAN_SHA=$ARMBIAN_SHA
          EOF
          echo "env=$(cat $GITHUB_ENV | base64 -w 0)" >>$GITHUB_OUTPUT

      - name: Show repositories information
        run: |
          C_RESET="\e[0m"
          C_BLACK="\e[30m"
          C_RED="\e[31m"
          C_GREEN="\e[32m"
          C_YELLOW="\e[33m"
          C_BLUE="\e[34m"
          C_MAGENTA="\e[35m"
          C_CYAN="\e[36m"
          C_GRAY="\e[37m"

          echo -e "$(cat <<EOF | sed -E 's/^  //'
            TIME: ${C_GREEN}$(date -d "$TIME" +'%Y-%m-%d %H:%M:%S %Z(%:z)')${C_RESET}
            Script: ${C_BLUE}${SCRIPT_REPO}${C_RESET}@${C_MAGENTA}${SCRIPT_REF}${C_RESET}(https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_REF})
                    ${C_YELLOW}${SCRIPT_SHA}${C_RESET}(https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_SHA})
            U-Boot: ${C_BLUE}${UBOOT_REPO}${C_RESET}@${C_MAGENTA}${UBOOT_RELEASE}${C_RESET}(https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_RELEASE})
                    ${C_MAGENTA}${UBOOT_TAG}${C_RESET}(https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_TAG})
            Armbian: ${C_BLUE}${ARMBIAN_REPO}${C_RESET}@${C_MAGENTA}${ARMBIAN_REF}${C_RESET}(https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_REF})
                     ${C_YELLOW}${ARMBIAN_SHA}${C_RESET}(https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_SHA})
          EOF
          )"

  build:
    name: Build ${{ matrix.RELEASE }}-${{ matrix.BRANCH }}-${{ matrix.TYPE == 'desktop' && matrix.DESKTOP_ENVIRONMENT || matrix.TYPE }}
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BRANCH:
          - edge
          - current
        RELEASE:
          - noble # Ubuntu 24.04 LTS
          - bookworm # Debian 12
        TYPE:
          - minimal

    steps:
      - name: Import env
        run: |
          echo "$(echo "${{ needs.prepare.outputs.env }}" | base64 -d)" >>$GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ARMBIAN_REPO }}
          ref: ${{ env.ARMBIAN_SHA }}

      - name: "Apply patch ${{ env.PATCHES }}"
        if: ${{ env.PATCHES }}
        run: |
          echo "::group::Download"
          curl -L -O "https://github.com/armbian/build/pull/{${PATCHES}}.patch"
          echo "::endgroup::"

          for file in *.patch; do
            echo "::group::Applying $file"
            patch --batch -p1 -N <"$file"
            echo "::endgroup::"
          done

      - name: Download debs
        uses: actions/download-artifact@v3
        with:
          name: debs-${{ matrix.BRANCH }}
          path: output/debs/

      - name: Build
        run: |
          # Don't update remote cache
          export GITHUB_ACTIONS=false
          sudo --preserve-env \
            ./compile.sh build \
              ALLOW_ROOT=yes \
              BOARD=onecloud \
              BRANCH=${{ matrix.BRANCH }} \
              RELEASE=${{ matrix.RELEASE }} \
              KERNEL_CONFIGURE=no \
              BUILD_MINIMAL=${{ matrix.TYPE == 'minimal' && 'yes' || 'no' }} \
              BUILD_DESKTOP=${{ matrix.TYPE == 'desktop' && 'yes' || 'no' }} \
              DESKTOP_ENVIRONMENT=${{ matrix.DESKTOP_ENVIRONMENT }} \
              DESKTOP_ENVIRONMENT_CONFIG_NAME=${{ matrix.DESKTOP_ENVIRONMENT_CONFIG_NAME }} \
              DESKTOP_APPGROUPS_SELECTED=${{ matrix.DESKTOP_APPGROUPS_SELECTED }} \
              EXPERT=yes \
              SKIP_EXTERNAL_TOOLCHAINS=yes \
              CLEAN_LEVEL= \
              USE_CCACHE=no \
              COMPRESS_OUTPUTIMAGE=img
          sudo chown $(id -u):$(id -g) -R output/

      # 添加步骤：下载 raysworld/onecloud-emmc-install 仓库并复制到编译完成的镜像 boot 文件夹中
      - name: Download onecloud-emmc-install repository and copy to boot
        if: "! contains(matrix.TYPE, 'burn')"
        run: |
          git clone https://github.com/raysworld/onecloud-emmc-install /tmp/onecloud-emmc-install
          diskimg=$(ls output/images/*.img)
          loop=$(sudo losetup --find --show --partscan $diskimg)
          sudo mkdir -p /mnt/boot
          sudo mount ${loop}p1 /mnt/boot
          sudo cp -r /tmp/onecloud-emmc-install/* /mnt/boot/
          sudo umount /mnt/boot
          sudo losetup -d $loop

      - name: Hash and compress images
        run: |
          for f in output/images/*.img; do
            sha256sum "$f" | tee -a sha256sum
            xz --threads=0 --compress "$f"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.RELEASE }}-${{ matrix.BRANCH }}-${{ matrix.TYPE == 'desktop' && matrix.DESKTOP_ENVIRONMENT || matrix.TYPE }}
          path: output/images/*

      - name: Generate release informations
        run: |
          cat <<EOF | sed -E 's/^  //' | tee Release.md
            $(cat sha256sum | awk '{printf "%s: `%s`\n", $2, $1}')
          EOF

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          append_body: true
          body_path: Release.md
          files: |
            output/images/*
